//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServiceChat", CallbackContract=typeof(client.ServiceReference1.IServiceChatCallback))]
    public interface IServiceChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connect", ReplyAction="http://tempuri.org/IServiceChat/ConnectResponse")]
        int Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connect", ReplyAction="http://tempuri.org/IServiceChat/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        void Disconnect(int identificator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int identificator);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMessage")]
        void SendMessage(string message, int identificator);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string message, int identificator);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/sendid")]
        void sendid(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/sendid")]
        System.Threading.Tasks.Task sendidAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/sendID1")]
        void sendID1(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/sendID1")]
        System.Threading.Tasks.Task sendID1Async(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/sendFile")]
        void sendFile(System.IO.FileInfo fileInfo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/sendFile")]
        System.Threading.Tasks.Task sendFileAsync(System.IO.FileInfo fileInfo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/single")]
        void single(int i, string path);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/single")]
        System.Threading.Tasks.Task singleAsync(int i, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/getFileList", ReplyAction="http://tempuri.org/IServiceChat/getFileListResponse")]
        System.IO.FileInfo[] getFileList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/getFileList", ReplyAction="http://tempuri.org/IServiceChat/getFileListResponse")]
        System.Threading.Tasks.Task<System.IO.FileInfo[]> getFileListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/MessageCallBack")]
        void MessageCallBack(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/ReceiveFile")]
        void ReceiveFile(System.IO.FileInfo fileinfo, string path);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatChannel : client.ServiceReference1.IServiceChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceChatClient : System.ServiceModel.DuplexClientBase<client.ServiceReference1.IServiceChat>, client.ServiceReference1.IServiceChat {
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(string name) {
            return base.Channel.Connect(name);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string name) {
            return base.Channel.ConnectAsync(name);
        }
        
        public void Disconnect(int identificator) {
            base.Channel.Disconnect(identificator);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int identificator) {
            return base.Channel.DisconnectAsync(identificator);
        }
        
        public void SendMessage(string message, int identificator) {
            base.Channel.SendMessage(message, identificator);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string message, int identificator) {
            return base.Channel.SendMessageAsync(message, identificator);
        }
        
        public void sendid(int id) {
            base.Channel.sendid(id);
        }
        
        public System.Threading.Tasks.Task sendidAsync(int id) {
            return base.Channel.sendidAsync(id);
        }
        
        public void sendID1(int id) {
            base.Channel.sendID1(id);
        }
        
        public System.Threading.Tasks.Task sendID1Async(int id) {
            return base.Channel.sendID1Async(id);
        }
        
        public void sendFile(System.IO.FileInfo fileInfo) {
            base.Channel.sendFile(fileInfo);
        }
        
        public System.Threading.Tasks.Task sendFileAsync(System.IO.FileInfo fileInfo) {
            return base.Channel.sendFileAsync(fileInfo);
        }
        
        public void single(int i, string path) {
            base.Channel.single(i, path);
        }
        
        public System.Threading.Tasks.Task singleAsync(int i, string path) {
            return base.Channel.singleAsync(i, path);
        }
        
        public System.IO.FileInfo[] getFileList() {
            return base.Channel.getFileList();
        }
        
        public System.Threading.Tasks.Task<System.IO.FileInfo[]> getFileListAsync() {
            return base.Channel.getFileListAsync();
        }
    }
}
